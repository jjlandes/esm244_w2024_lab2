---
title: "ESM 244 lab 2 - time series"
author: "Jesse Landesman"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(tsibble)
library(feasts)
library(fable)
```

# Part 1: Time series iwht Toolik Lake data

## Always look at your data

### Read in the data

```{r}
toolik_df <- read_csv(here("data", "toolik_daily.csv"))

### convert data frame to time series

toolik_ts <- toolik_df %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  as_tsibble(key = NULL,   ### if we had multiple sites, key by site
             index = date) ### this is our time series variable

ggplot(toolik_ts, aes(x = date, y = daily_air_temp))+
  geom_line()+
  labs(x = "Date", y = "Mean daily air temperature (Celsius)\n at Toolik Station")
```

## Use filter_index() function to filter by date/time!

```{r}
### Filter from december 2010 to january 2011
toolik_ts %>% 
  filter_index("2018-01-01" ~ .)

```

## Use index_by() to aggregate time series by increments

```{r}
toolik_month <- toolik_ts %>% 
  index_by(yr_mo = ~yearmonth(.)) %>% 
  summarize(monthly_mean_temp = mean(daily_air_temp, na.rm = TRUE)) %>% 
  ungroup()
```


Now let's plot that!

```{r}
ggplot(data = toolik_month, aes(x = yr_mo, y = monthly_mean_temp))+
  geom_line()

ggplot(data = toolik_month, aes(x = year(yr_mo), y = monthly_mean_temp))+
  geom_line()+
  facet_wrap(~ month(yr_mo, label = TRUE))+
  labs(x = "Year", y = "Annual mean air temp (Celsisus)", title = "Toolik Station mean annual air temperature", subtitle = "1988-2023", caption = '<put citation here>')
```

# Part 2: Time series wrangling and forecasting!

Energy usage by sector, in trillions of BTUs.

```{r}
energy_df <- read_csv(here("data", "energy.csv"))
```

### Analysis goals

* examine patterns and trends in residential energy consumption over time
* predict what residential energy use patterns will look like over the next five years

### Pseudocode
- separate so you only get residential sector energy consumption
  - filter or group by
- convert year month to a date
- change the energy dataframe df to a time series ts
- mutate data column to be in standard time 
- average the energy consumption by year, so looking year to year
- do forecasting after you look at the trends (seasonality, trends, etc.)

```{r}
energy_ts <- energy_df %>% 
  mutate(date = tsibble::yearmonth(yrmonth)) %>% 
  as_tsibble(index = date,
             key = sector)

ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector))+
  geom_line()+
  labs(x = 'Date', y = 'Energy consumption by sector\n (BTUs)')+
  facet_wrap(~ sector, ncol=1)
```
* residential looks similar to commercial with an upward overall trend, maybe leveling off or decreasing in recent years
* seasonality: in more warm or cold months, crank up the heating or cooling and using more energy; summer and winter peaks, summer peaks seem to be getting larger over time


### season plot
```{r}
energy_ts %>% 
  filter(sector == 'residential') %>% 
  gg_season(y = energy_total, pal = hcl.colors(n = 9))+
  theme_light()+
  labs(x = "Month", y = "Residential energy consumption\n (trillion BTUs)")
```

### Subseries plot

```{r}
energy_ts %>% 
  gg_subseries(y = energy_total)
```

### Decomposition

```{r}
### Find the STL decomposition (L=LOESS) locally estimated scatterplot smoothing

dcmp <- energy_ts %>% 
  filter(sector == 'residential') %>% 
  model(feasts::STL(energy_total ~ season(period = '1 year')+
                      trend(window = 49)))

components(dcmp) %>% 
  autoplot()
```

### Autocorrelation function

```{r}
energy_ts %>% 
  filter(sector == 'residential') %>% 
  ACF(energy_total) %>% 
  autoplot()
```

### Forecasting by Hold Winters exponential smoothing

Specify for each component, whether none ("n"), additive("A"), or multiplicative ("M")
```{r}
### Create a model
energy_fit <- energy_ts %>% 
  filter(sector == 'residential') %>% 
  filter_index('2000-01' ~ .) %>% 
  model(ets = ETS(energy_total ~ season(method = "M") + trend(method = "A")))

energy_forecast <- energy_fit %>% 
  forecast(h = '5 years')

energy_forecast %>% 
  autoplot(energy_ts)
```


```{r}
energy_predicted <- energy_fit %>% 
  broom::augment()

ggplot(energy_predicted)+
  geom_line(aes(x = date, y = energy_total))+
  geom_line(aes(x = date, y = .fitted), color = 'red', alpha = .7)

ggplot(energy_predicted, aes(x = .resid))+
  geom_histogram()
```

